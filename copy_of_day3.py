# -*- coding: utf-8 -*-
"""Copy of day3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NIdvYJY3IIPkZ8KKz_0dZsuZRy6bLDRb
"""

import pandas as pd
import numpy
import matplotlib.pyplot as plt

!pip install keras
!pip install tensorflow

prices = pd.read_csv("/content/FB-stock-prices.csv")

prices.dtypes

plt.figure(figsize=(30,20))
plt.plot(prices['Price'])
plt.show()

prices.count()

"""Data Pre-Processing"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
scaled_prices = sc.fit_transform(prices[["Price"]].values)

print(scaled_prices)

total_size =len(scaled_prices)
test_size = 50
train_size = total_size - test_size

print(total_size)
print(test_size)
print(train_size)

training_prices = scaled_prices[0:train_size]
test_prices = scaled_prices[train_size:]

print(training_prices.shape)

def create_rnn_dataset(data, lookback=1):
  data_x=[]
  data_y=[]
  for i in range(len(data)-lookback-1):
    a = data[i:(i+lookback),0]
    data_x.append(a)
    data_y.append(a)
  return numpy.array(data_x), numpy.array(data_y)

lookback = 25
train_req_x, train_req_y = create_rnn_dataset(training_prices, lookback)

train_req_y.shape

train_req_x.shape

train_req_x = numpy.reshape(train_req_x, (train_req_x.shape[0], 1, train_req_x.shape[1]))

print(train_req_x.shape)

from keras.models import Sequential
from keras.layers import SimpleRNN, Dense
import tensorflow as tf

price_model = Sequential()
price_model.add(SimpleRNN(32,input_shape=(1,lookback)))
price_model.add(Dense(1))
price_model.compile( optimizer='adam', loss='mean_squared_error',metrics=['mse','accuracy'])

price_model.summary()

price_model.fit(train_req_x, train_req_y, epochs=5, batch_size=10, verbose=1)

text_req_x, text_req_y = create_rnn_dataset(training_prices, lookback)
text_req_x=numpy.reshape(text_req_x, (text_req_x.shape[0], 1, text_req_x.shape[1]))

price_model.evaluate(text_req_x, text_req_y,verbose=1)

predict_on_text=price_model.predict(text_req_x)

print(predict_on_text)

predicted_value = sc.inverse_transform(predict_on_text)
print(predicted_value)

prev_price = numpy.array([324, 356, 456, 321, 320, 345, 301 ,302, 304, 309, 333, 322, 311, 344 ,355, 366, 377, 388, 399, 319, 329,339,349,359,369])
sc_prices = sc.transform(prev_price.reshape(-1,1))
model_input = numpy.reshape(sc_prices, (sc_prices.shape[1],1,sc_prices.shape[0]))
pred = price_model.predict(model_input)
stock_pred = sc.inverse_transform(pred)
print(stock_pred)